{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>EWC stands for \"Everywhere Window Create\". EWC is a cross-platform implementation of the <code>\u2395WC</code> family of system functions (<code>\u2395WC, \u2395WS, \u2395WG, \u2395WN, \u2395NQ and \u2395DQ</code>) that are available in Dyalog APL for Microsoft Windows.</p> <p>EWC only supports a subset of the functionality provided by <code>\u2395WC</code>. This subset is growing, driven by the requirements of early adopters. The supported subset is documented in the object reference.</p> <p>Note</p> <p>At this time, EWC is work in progress, and not supported via   normal channels. A supported release of EWC is expected in mid-2025.</p> <p>EWC can run in \"Desktop\" mode using an HTMLRenderer. In this mode, EWC supports multiple forms in the same way as <code>\u2395WC</code>, creating one HTMLRenderer for each form.</p> <p>Alternatively, EWC can be initialised in \"Browser\" mode, in which case it starts a listener on the configured port (22322 by default), and a Browser must be connected to that port. In this mode, it really only makes sense to have a single form, although modeal MsgBox's can be popped up if required.</p> <p>Finally, there is an experimental \"Multi\" mode, intended to support  multi-user applications. In this mode, EWC must also be used via browsers. For each connection, the application namespace is cloned. If the application namespace is called <code>demo</code>, then clones will be named <code>demo_1</code>, <code>demo_2</code> etc. This allows each session to have separate state.</p> <p>The browser-based modes can be used on any Dyalog-supported platform, desktop mode is restricted to the platforms where the HTMLRenderer is available - currently Linux, MacOS and Windows.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Check out the installation instructions, the section on initialisation, or the implementation details.</p> <p>If you are not familiar with <code>\u2395WC</code>, you may want to start with the standard Dyalog documentation for this feature. The documentation for <code>EWC</code> only discusses differences between the original Win32 based implementation (<code>\u2395WC</code>) and the emulation (<code>EWC</code>).</p> <p>Note</p> <p>During prototyping, the project has been known as JSWC, or \"JavaScript WC\".   Both the code and the documentation for EWC still contain references to JSWC.  Until the transition is complete, JSWC should be read as EWC anywhere that it occurs.</p>"},{"location":"Discussion/Differences/","title":"Differences between <code>EWC</code> and <code>\u2395WC</code>","text":"<p>Most importantly, <code>EWC</code> only supports a subset of the objects supported by <code>\u2395WC</code> - and for each of the supported classes, only a subset of the features of the class. </p> <p>If you use an unsupported property, EWC will output a warning message to the log and continue, in the hope that your application will work in a degraded mode. The warning message identifies the line of application code that used the unsupported feature. For example:</p> <p><code>59:15.169 W:   *** Warning: at  Make[16]  wMakeSubForm[8] - Unsupported on button:  FCol  BCol  Accelerator</code></p> <p>You can decide to ignore the warning, work around it, or request support for the  missing feature from Dyalog. For more information, see the documentation of supported classes.</p>"},{"location":"Discussion/Differences/#validation-and-error-messages","title":"Validation and Error Messages","text":"<p>Property validation and error messages are not as reliable as <code>\u2395WC</code> and <code>\u2395WS</code>.  If you provide incorrect property values, the results can be unpredictable: the property may simply be ignored, in the worst case the form will be blanked out due to the creation of invalid HTML.</p>"},{"location":"Discussion/Differences/#implicit-interactive-dq","title":"Implicit Interactive <code>\u2395DQ</code>","text":"<p>This is supported, but considered experimental. The implementation uses a  Timer object called _EWC.EWCTIMER within the application namespace.</p>"},{"location":"Discussion/Differences/#images-and-imagelists","title":"Images and ImageLists","text":"<p>Images are handled differently - all images must be made available as image files that can be loaded by a web browser. See Images for details.</p>"},{"location":"Discussion/Differences/#temporary-limitations","title":"Temporary Limitations","text":"<p>The following restrictions are temporary and will be relaxed before the first supported release:</p> <ul> <li> <p>Coord must be (and defaults to) \"Pixel\"</p> </li> <li> <p>Setting properties must be done using \u2395WC and \u2395WS, assignment is not supported. </p> </li> <li> <p>Up-to-date property values must be retrieved using \u2395WG. Although a namespace    is created for each EWC object, and there are variables in these spaces that    correspond to the properties of GUI objects, these values are not kept up-to-date    when the user manipulates the GUI.</p> </li> </ul>"},{"location":"Discussion/Images/","title":"Images","text":"<p>In EWC all images are defined using images files, which can be in any format supported by web browsers.</p> <p>The ImageList object has a property \"Files\", which contains a list of the file names that define the ImageList. It is not possible to populate an ImageList by creating child icons and bitmap objects, as in <code>\u2395WC</code>.</p> <p>The location of your images must be declared by setting the variable EWC.RESOURCES before calling EWC.Init, fo example:</p> <p><code>EWC.RESOURCES\u21901 2\u2374'images' '/tmp/myapp/images'</code></p> <p>This creates a virtual folder <code>/images/</code> that can be referred to when creating ImageLists and other objects created from image files.</p> <p>See the [Configuration] for more details.</p>"},{"location":"Discussion/TechDetails/","title":"Implementation","text":"<p>A detailed discussion of the implementation will appear here.</p>"},{"location":"ObjectRef/ApexChart/","title":"ApexChart","text":"<p>The EWC implementation of ApexChart supports the following properties:</p> <p>|   ChartType  |   Options  |   Series  |             |  |   Event      |   Posn     |   Size    |             |</p> <p>Supported events:</p> <p>|  click  |  legendclick  |         |        |</p>"},{"location":"ObjectRef/BitMap/","title":"BitMap","text":"<p>The EWC implementation of BitMap has some degree of support for:</p> <p>|   File  |   Size  |         |        |</p>"},{"location":"ObjectRef/Button/","title":"Button","text":"<p>The EWC implementation of Button has some degree of support for:</p> <p>|   Align    |   Event    |  Size   |   Styles  |  |   Attach   |   Picture  |  State  |   Visible |  |   Caption  |  *Posn     |   Style  |           |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  KeyPress  |  Select  |            |           |</p>"},{"location":"ObjectRef/Circle/","title":"Circle","text":"<p>The EWC implementation of Circle has some degree of support for:</p> <p>|   ArcMode  |   FStyle   |   Radius   |           |  |   End      |   FillCol  |   Start    |           |  |   FCol     |   Points   |   Visible  |           |</p>"},{"location":"ObjectRef/Classes/","title":"Supported Features","text":"<p>EWC has some degree of support for the following \u2395WC classes:</p> <p>|   BitMap    |   Grid            |   Menu          |   SubForm       |  |   Button    |   Group          |   MenuBar    |   TabButton   |  |   Circle    |   Icon            |   MenuItem  |   TabControl |  |   Combo      |   Image          |   MsgBox      |   Text             |  |   Edit        |   ImageList  |   Poly          |   Timer           |  |   Ellipse  |   Label          |   Rect          |   TreeView     |  |   Font        |   List            |   Scroll      |                               |  |   Form        |   ListView    |   Splitter  |                               |</p> <p>In addition, EWC adds the following classes not supported by \u2395WC:</p> <p>|   ApexChart  |   RibbonButton            |   RibbonGroup          |                             |  |   Ribbon        |   RibbonButtonGroup  |   RibbonGroupItem  |                             |</p> <p>See EWC.Doc.Details 'classname' for more details</p>"},{"location":"ObjectRef/Combo/","title":"Combo","text":"<p>The EWC implementation of Combo has some degree of support for:</p> <p>|   Attach  |   Items  |  SelItems  |  Text    |  |   Event   |  Posn   |  Size      |   Visible |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  Select  |          |          |         |</p>"},{"location":"ObjectRef/Edit/","title":"Edit","text":"<p>The EWC implementation of Edit has some degree of support for:</p> <p>|   Attach    |   FieldType  |   Posn     |  Text    |  |   Border    |   Font       |  SelText  |  *Value   |  |   Decimals  |   FontObj    |   Size     |   Visible |  |   Event     |   MaxLength  |   Style    |           |  |   FCol      |   Password   |   Styles   |           |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  Change  |  GotFocus  |  KeyPress  |         |</p> <p>Known limitations of the Edit implementation:</p> <p>There is limited support for FieldType, but Numeric and Date should work.</p>"},{"location":"ObjectRef/Ellipse/","title":"Ellipse","text":"<p>The EWC implementation of Ellipse has some degree of support for:</p> <p>|   ArcMode  |   FStyle   |   Size     |           |  |   End      |   FillCol  |   Start    |           |  |   FCol     |   Points   |   Visible  |           |</p>"},{"location":"ObjectRef/Font/","title":"Font","text":"<p>The EWC implementation of Font has some degree of support for:</p> <p>|   Italic  |   Rotate  |   Underline  |          |  |   PName   |   Size    |   Weight     |          |</p>"},{"location":"ObjectRef/Form/","title":"Form","text":"<p>The EWC implementation of Form has some degree of support for:</p> <p>|   BCol     |   Flex     |  Size     |        |  |   Caption  |   Picture  |   Styles   |        |  |   Coord    |  Posn     |   Visible  |        |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  Configure  |  MouseDown  |  MouseUp  |            |</p> <p>Known limitations of the Form implementation:</p> <p>Coord defaults to Pixel, Size to 400 600 and Posn to 100 100</p>"},{"location":"ObjectRef/Grid/","title":"Grid","text":"<p>The EWC implementation of Grid has some degree of support for:</p> <p>|   Attach        |   ColTitleFCol  |   Input         |   TitleHeight |  |   BCol          |   ColTitles     |  Posn          |   TitleWidth  |  |   CellFonts     |  CurCell       |   RowTitleBCol  |   VScroll     |  |   CellHeights   |   Event         |   RowTitleFCol  |  Values      |  |   CellTypes     |   FCol          |   RowTitles     |   Visible     |  |   CellWidths    |   FormatString  |   ShowInput     |               |  |   ColTitleBCol  |   HScroll       |  Size          |               |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  CellChanged  |  CellMove  |  KeyPress  |              |</p>"},{"location":"ObjectRef/Group/","title":"Group","text":"<p>The EWC implementation of Group has some degree of support for:</p> <p>|   Attach  |   Caption  |  Posn  |   Styles  |  |   Border  |   Flex     |  Size  |   Visible |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  Configure  |             |             |            |</p>"},{"location":"ObjectRef/Icon/","title":"Icon","text":"<p>The EWC implementation of Icon has some degree of support for:</p> <p>|   File  |         |         |        |</p>"},{"location":"ObjectRef/Image/","title":"Image","text":"<p>The EWC implementation of Image has some degree of support for:</p> <p>|   Picture  |   Points  |   Visible  |           |</p>"},{"location":"ObjectRef/ImageList/","title":"ImageList","text":"<p>The EWC implementation of ImageList has some degree of support for:</p> <p>|   Files  |   ImageCount  |   Masked  |   Size |</p>"},{"location":"ObjectRef/Label/","title":"Label","text":"<p>The EWC implementation of Label has some degree of support for:</p> <p>|   Attach   |   FCol     |   Posn    |   Visible |  |   BCol     |   Font     |   Size    |           |  |   Caption  |   FontObj  |   Styles  |           |</p> <p>Supported events:</p> <p>|  KeyPress  |            |            |           |</p>"},{"location":"ObjectRef/List/","title":"List","text":"<p>The EWC implementation of List has some degree of support for:</p> <p>|   Attach  |   Items  |  SelItems  |   Visible |  |   Border  |  Posn   |  *Size      |           |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul>"},{"location":"ObjectRef/ListView/","title":"ListView","text":"<p>The EWC implementation of ListView has some degree of support for:</p> <p>|   BCol       |   ImageIndex    |   ReportInfo  |   Visible |  |   Border     |   ImageListObj  |  *SelItems    |           |  |   ColTitles  |   Items         |   Size        |           |  |   FCol       |   Posn          |   View        |           |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  GotFocus  |  ItemDblClick  |  ItemDown  |           |</p>"},{"location":"ObjectRef/Menu/","title":"Menu","text":"<p>The EWC implementation of Menu has some degree of support for:</p> <p>|   Caption  |            |            |           |</p>"},{"location":"ObjectRef/MenuBar/","title":"MenuBar","text":"<p>The EWC implementation of MenuBar has some degree of support for:</p> <p>|   Visible  |            |            |           |</p>"},{"location":"ObjectRef/MenuItem/","title":"MenuItem","text":"<p>The EWC implementation of MenuItem has some degree of support for:</p> <p>|   Caption  |   Event  |            |           |</p> <p>Supported events:</p> <p>|  Select  |          |          |         |</p>"},{"location":"ObjectRef/MsgBox/","title":"MsgBox","text":"<p>The EWC implementation of MsgBox has some degree of support for:</p> <p>|   Btns     |   Default     |   PropList  |        |  |   Caption  |   Event       |   Style     |        |  |   Data     |   MethodList  |   Text      |        |</p>"},{"location":"ObjectRef/Poly/","title":"Poly","text":"<p>The EWC implementation of Poly has some degree of support for:</p> <p>|   FCol    |   FillCol  |   LWidth  |   Visible |  |   FStyle  |   LStyle   |   Points  |           |</p>"},{"location":"ObjectRef/Rect/","title":"Rect","text":"<p>The EWC implementation of Rect has some degree of support for:</p> <p>|   FCol    |   FillCol  |   Radius  |   Visible |  |   FStyle  |   Points   |   Size    |           |</p>"},{"location":"ObjectRef/Ribbon/","title":"Ribbon","text":"<p>The EWC implementation of Ribbon supports the following properties:</p> <p>|   BCol  |   FCol          |   Size       |   Visible |  |   Data  |   ImageListObj  |   TitleBCol  |           |</p>"},{"location":"ObjectRef/RibbonButton/","title":"RibbonButton","text":"<p>The EWC implementation of RibbonButton supports the following properties:</p> <p>|   Border   |   Data   |   Icon        |   ImageListObj |  |   Caption  |   Event  |   ImageIndex  |   Size         |</p> <p>Supported events:</p> <p>|  Select  |          |          |         |</p>"},{"location":"ObjectRef/RibbonButtonGroup/","title":"RibbonButtonGroup","text":"<p>The EWC implementation of RibbonButtonGroup supports the following properties:</p> <p>|   Border    |   Data   |   Icons       |   ImageListObj |  |   Captions  |   Event  |   ImageIndex  |                |</p> <p>Supported events:</p> <p>|  Select  |          |          |         |</p>"},{"location":"ObjectRef/RibbonGroup/","title":"RibbonGroup","text":"<p>The EWC implementation of RibbonGroup supports the following properties:</p> <p>|   BorderCol  |   Data  |   Size  |   Title |</p>"},{"location":"ObjectRef/RibbonGroupItem/","title":"RibbonGroupItem","text":"<p>The EWC implementation of RibbonGroupItem supports the following properties:</p> <p>|   Data  |   Size  |         |        |</p>"},{"location":"ObjectRef/Scroll/","title":"Scroll","text":"<p>The EWC implementation of Scroll has some degree of support for:</p> <p>|   Align   |   HScroll  |   Size     |   Visible |  |   Attach  |   Posn     |  *Thumb    |           |  |   Event   |   Range    |   VScroll  |           |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  Scroll  |          |          |         |</p>"},{"location":"ObjectRef/Splitter/","title":"Splitter","text":"<p>The EWC implementation of Splitter has some degree of support for:</p> <p>|   Event  |   SplitObj1  |   Style    |         |  |  *Posn   |   SplitObj2  |   Visible  |         |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  EndSplit  |            |            |           |</p>"},{"location":"ObjectRef/SubForm/","title":"SubForm","text":"<p>The EWC implementation of SubForm has some degree of support for:</p> <p>|   BCol     |   Flex     |  Size    |   Visible |  |   Border   |   Picture  |   Styles  |           |  |   Caption  |  Posn     |   TabObj  |           |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  Configure  |             |             |            |</p>"},{"location":"ObjectRef/TabButton/","title":"TabButton","text":"<p>The EWC implementation of TabButton has some degree of support for:</p> <p>|   Caption  |   Event  |            |           |</p> <p>Supported events:</p> <p>|  Select  |          |          |         |</p>"},{"location":"ObjectRef/TabControl/","title":"TabControl","text":"<p>The EWC implementation of TabControl has some degree of support for:</p> <p>|   ActiveBCol  |   BCol  |   MultiLine  |   Size    |  |   Attach      |   FCol  |   Posn       |   Visible |</p>"},{"location":"ObjectRef/Text/","title":"Text","text":"<p>The EWC implementation of Text has some degree of support for:</p> <p>|   BCol  |   Font     |   Points  |   Text    |  |   FCol  |   FontObj  |   Rotate  |   Visible |</p>"},{"location":"ObjectRef/Timer/","title":"Timer","text":"<p>The EWC implementation of Timer has some degree of support for:</p> <p>|   Active  |   Event  |  *FireOnce  |   Interval |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  Timer  |         |         |        |</p>"},{"location":"ObjectRef/TreeView/","title":"TreeView","text":"<p>The EWC implementation of TreeView has some degree of support for:</p> <p>|   Attach  |   ImageIndex    |   Posn      |   Visible |  |   Depth   |   ImageListObj  |  *SelItems  |           |  |   Event   |   Items         |   Size      |           |</p> <ul> <li>indicates that the property can change after it has been set.</li> </ul> <p>Supported events:</p> <p>|  Expanding  |  ItemDblClick  |  ItemDown  |  Retracting |</p>"},{"location":"Usage/Configuration/","title":"Configuration","text":"<p>The <code>EWC</code> namespace contains a number of variables that can be used to  configure the system.</p>"},{"location":"Usage/Configuration/#port","title":"PORT","text":"<p>Sets the port number to be used by the server. Defaults to 22322.</p>"},{"location":"Usage/Configuration/#resources","title":"RESOURCES","text":"<p>Sets up virtual folders that contain images and other resources that your  application might refer to. This is a 2-column matric containing pairs of virtual folder names and real folders containing resource files. For example:</p> <p><code>EWC.RESOURCES\u21901 2\u2374'images' '/tmp/myapp/images'</code></p> <p>This creates a virtual folder <code>/images/</code> that can be referred to when creating ImageLists and other objects created from image files.</p> <p>You can define as many resources as you like, one per row.</p>"},{"location":"Usage/Configuration/#logmodes","title":"LOGMODES","text":"<p>This variable allows you to control the log messages that are output to the session while running EWC. At this stage in the development of EWC, all messages are output for diagnostic purposes. By default, all message types are output (<code>EWC.LOGMODES\u2190\u2395A</code>).  At the time that this text was written, the following modes existed:</p> <ul> <li>D: Debug</li> <li>E: Error</li> <li>F: Format Request</li> <li>W: Warning</li> <li>T: Transmit on WebSocket</li> <li>R: Receive on WebSocket</li> <li>C: Connect or Disconnect</li> <li>U: Unsupported feature</li> <li>N: Explicit NQ</li> <li>P: ProcessEvent</li> <li>G: WG processing</li> </ul> <p>An up-to-date list can be found in the function <code>EWC.Log</code>.</p>"},{"location":"Usage/Configuration/#for-developers","title":"For Developers","text":""},{"location":"Usage/Configuration/#showdevtools","title":"SHOWDEVTOOLS","text":"<p>If you set this to 1, EWC will call <code>ShowDevTools 1</code> on each HTMLRenderer that it creates.</p>"},{"location":"Usage/Configuration/#jsclientfolder","title":"JSClientFolder","text":"<p>If you want to override EWC's efforts to locate a folder where the JavaScript client code resides, you can set this variable to point to a specific folder. This is only useful if you are either a developer or on the bleeding edge of client development, and need to switch between versions of the client.</p> <p>If this variable is not set, EWC will first look for a sibling folder called <code>EWC-client</code> in case you have a checkout of the JavaScript code in that location, and if that does not exist use the client in the <code>/client/dist</code> folder within the EWC folder.</p>"},{"location":"Usage/Initialisation/","title":"Initialising an EWC session","text":"<p>Once you have a folder on your machine containing EWC, you can load it into a Dyalog APL session (18.2 or later is required):</p> <p><code>]link.import # /path/to/ewc</code></p> <p>Where <code>/path/to/ewc</code> is the name of the folder that you created during installation.</p>"},{"location":"Usage/Initialisation/#ewcinit","title":"EWC.Init","text":"<p>The function EWC.Init takes a right argument of the mode that you want to  enable: </p> <ul> <li>'Desktop' to run each form in an HTMLRenderer</li> <li>'Browser' to allow a single session from a browser</li> <li>'Multi' to allow multiple sessions from browsers (more about that later)</li> </ul> <p>For example:</p> <p><code>EWC.Init 'Desktop'</code></p> <p><code>EWC.Init</code> will also create cover-functions <code>eWC</code>, <code>eWS</code> and so on, in the  namespace from which Init was called. These are intended to be used as replacements for the system functions <code>\u2395WC</code>, <code>\u2395WS</code>, etc.</p> <p>If you would like to use a different prefix letter for these functions, you can  provide a left argument to change the names. For example,</p> <p><code>'x' EWC.Init 'Browser'</code></p> <p>Will create functions <code>xWC</code>, <code>xWS</code> etc, and start EWC in Browser mode.</p>"},{"location":"Usage/Initialisation/#multi-modes","title":"Multi Modes","text":"<p>In Desktop and Browser mode, your application can call EWC.Init and then immediately continue to create GUI components using <code>eWC</code>. In browser mode, EWC.Init will not return until a browser is connected.</p> <p>However, in Multi mode, your application namespace must contain a  function called <code>Init</code> which will be called when each new browser session starts, to create the GUI for the new session.</p>"},{"location":"Usage/Installation/","title":"Installation","text":"<p>EWC is developed as an open-sourcen GitHub repository. To download the code, you can either install Git and clone the repository using the following command:</p> <p><code>git clone https://github.com/dyalog/ewc.git</code></p> <p>Alternatively, you can just download a zip file containing all the code.</p>"},{"location":"Usage/Installation/#verify-installation","title":"Verify Installation","text":"<p>The simplest way to verify installtion is to run the demo application:</p> <p><code>]link.create # /path/to/ewc</code> <code>demo.Run ''</code></p> <p>This will pop up a form with a Dyalog logo and a dropdown on the right which allows you to select a variety of simple test applications that have been used to test EWC during development.</p> <p>Alternatively, after linking ewc, you can create a form as follows:</p> <p><code>EWC.Init 'Desktop'</code> <code>'F1' eWC 'Form' 'Hello World' (10 10) (400 600)</code></p> <p>This should create an HTMLRenderer window with the caption \"Hello World\". For more information on getting started, see initialisation.</p>"},{"location":"Usage/Installation/#ewc-development","title":"EWC Development","text":"<p>If you are developing EWC, or you are working with EWC developers and need to quickly pick up changes to the JavaScript client, it may be a good idea to clone the client code separately. In order for EWC to automatically find this code, it must be located in a folder called ewc-client, in the same folder as EWC itself.</p> <p>You can achieve this using:</p> <p><code>git clone https://github.com/dyalog/ewc-client.git</code></p>"}]}