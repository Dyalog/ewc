 r←eWC_test sinkListOfTests;IHaveRestarted;exceptions;ignoreChildren;ignoreChildren_of
 ;demos;d;⎕TRAP;f;t;file;sup;rC;z;lastd;dl;de;from;to;arg;msg;src;_Env
 ;DEFAULTS;v;pi;sp;Supported;PropList;up;ctl;data;get;ListOfTests;tested
 ;ListOfDemos;Dynamic;logs;NL;log;f_olog;lg
⍝ this is admittedly an ugly hack - but I didn't want to waste time fixing it just now...
⍝ the problem is that the DTest DSL assumes tests are executed in the ns that DTest created while running the test -
⍝ but these tests are executed in #.tests.demo.
⍝ So we make the most populare variables and functions available:
 #.tests.demo.Check←Check
 #.tests.demo.Assert←Assert
 #.tests.halt←##.halt
 #.tests.trace←##.trace
 #.tests.verbose←##.verbose
 #.tests.RandomVal←##.RandomVal
 #.tests.dtb←##.dtb  ⍝ needed by check
 logs←~⍬
 ListOfTests←#.tests.demo.⎕NL ¯3
 ListOfTests←{((⊂'Test')≡¨4↑¨⍵)/⍵}ListOfTests
 tested←⍬   ⍝ list of executed tests
 ListOfDemos←demos←{2⊃⎕NPARTS ⍵}¨⊃0(⎕NINFO⍠1)EWC_DPATH,'/Demo*.*'
 ListOfDemos←{((⊂'Demo')≡¨4↑¨⍵)/⍵}ListOfDemos   ⍝ insist on "Demo" prefix (demo... are subroutines!)
 NL←⎕UCS 10

 DEFAULTS←0(⎕JSON⍠'Dialect' 'JSON5')(1⊃⎕NGET ##.TESTSOURCE,'eWC_defaults.json5')
 '['⎕NPUT(EWC_HOME,'JSWC/objectlog.json5')1  ⍝ initialise this file so that we can append single log objects to it...
 r←''
 dl←⍬  ⍝ demo list we want to run
 de←⍬  ⍝ demos we NOT want to run
 arg←1↓##.args.Arguments   ⍝ 1st element of arg is the name of the .dylogtest
 _Env←{
    ⍝ get value of environment variable or #-based variable (case-sensitive, prefixed with 'EWC_')
    ⍝ defaults taken from DEFAULTS ns.
     z←2 ⎕NQ #'GetEnvironment'⍵
     def←{2=#.⎕NC'EWC_',⍵:#⍎'EWC_',⍵ ⋄ DEFAULTS⍎⍵}⍵
     0=≢z:def
     (⎕DR def)∊80 160:⍵
     2⊃⎕VFI ⍵
 }

 :If 0<≢arg
     :For d :In arg
         :If '~'=⊃d
             de,←⊂1↓d
         :ElseIf ∨/'..'⍷d
             (from to)←'|'(≠⊆⊢)' ',(⊃('(.*)\.\.(.*)'⎕S'\1|\2')d),' '
             f←0
             t←≢demos
             :If 0<≢from
                 f←demos⍳⊂1↓from
             :EndIf
             :If 0<≢to
                 t←demos⍳⊂¯1↓to
             :EndIf
             dl,←(f-1)↓t↑demos
         :Else
             dl,←⊂d
         :EndIf
     :EndFor
 :Else
     dl←(∊'Demo'∘≡¨4↑¨demos)/demos
 :EndIf
 dl←4↓¨dl
 demos←∪dl~de∪'Menu' 'Default'
 lastd←'just started'
 :If 1=1↑0 _Env'RANDOMORDER'
     demos←demos[('eWC_order_',⍕≢demos)##.RandomVal 2/≢demos]
 :EndIf

 :For d :In demos
     :If (⊂'~',d)∊##.args.Arguments
         :Continue
     :EndIf
     ⍝ inspect the demo to determine coverage of properties, methods and events
     ⍝src←#.demo.⎕NR d
     ⍝wc←('''(.*)''\s*eWC\s*''(.*)'''⎕S'\1')src  ⍝ list of controls that are created (and their names)
     ⍝ws←('''(.*)''\s*eWC\s*''.*''\s*(''.*'')*'⎕S'\1')src  ⍝ props that were set (and names of related controls)
     ⍝ nah, impossible - see email to MK
     msg←''  ⍝ a global var (initialised in eWC_createBrowser)
     IHaveRestarted←0
     :If 0=⎕NC'PROCESS'
     :OrIf PROCESS{6::1 ⋄ ⍺⍎⍵}'HasExited'
restart:
         BRWSR eWC_createBrowser MODE
     :EndIf
     :If 0<pi←0 _Env'PROGRESSINDICATOR'
        ⍝ 0= no info
        ⍝ 1= show name of next test
        ⍝ 2= AND wait for keypress
         :Select ,pi
         :Case ,1
             ⎕←d
         :Case ,2
             'press <enter> for ',d
             {}⍞
         :EndSelect
     :EndIf
     :If ~⊃'HtmlRenderer'⍷BRWSR
         :Trap 11  ⍝ catch exception
             #.S.GoTo ROOT
         :EndTrap
     :EndIf
     ctl←'CssSelector'#.S.Find'[id$="MENU"]'  ⍝ use CssSelector to find ids ending with MENU because the menu is sometimes located in a subform
     :If 326 Check ⎕DR ctl    ⍝ check if we find the menu
         msg←'could not find F1.MENU (possibly something went wrong before (lastd=',lastd,')',NL  ⍝ although that should be veeery unlikely now....
         :If IHaveRestarted=0
             IHaveRestarted←1
             →restart
         :Else
             msg←'even a restart did not help to fix the problem',NL
             →0
         :EndIf
     :Else
         :If ##.trace
             ⎕←'next: select test "',d,'"'
             (⎕LC[1]+1)⎕STOP 1⊃⎕XSI
         :EndIf

         z←ctl #.S.Select d      ⍝ selecting the test will load it
         :If 1 Check z  ⍝ can we select the test in the menu?
             msg←'test not found in menu (attention: it is case-sensitive!)',NL
         :Else
             {}⎕DL 1  ⍝ allow some time to load
             :Trap 90  ⍝ check if Htmlrenderer is still alive and kicking...
                 {}#.S.BROWSER.Url
             :Else
                 :If ⊃'no such window: target window already closed'⍷⎕EXCEPTION.Message   ⍝ nah - probably because a new form was opened
                     1 #.S.InitBrowser BRWSR
                 :Else
                     'how did we get here?'⎕SIGNAL 11   ⍝ something is fishy...
                 :EndIf
             :EndTrap

             ⍝ z←'CssSelector'#.S.Find'[id$="MENU"]'
             t←('CssSelector' '[id$="MENU"]')#.S.WaitFor'Pick a Demo'
             :If ''Check t  ⍝ check if loaded test also has a menu...
                 msg←'could not find F1.MENU'
             :Else
                 t←('CssSelector' '[id$="STOP"]')#.S.WaitFor'Stop'
                 :If ''Check t   ⍝ wait for the Stop button as an indication that the test has loaded indeed
                     ⎕←msg←'could not find STOP button'
                     ⎕←'t=',t
                     ⎕TRAP←0 'S' ⋄ (⎕LC[1]+1)⎕STOP 1⊃⎕XSI
                 :Else
                     t←'Test',d   ⍝ name of related test
                     :If (⊂t)∊ListOfTests  ⍝ check if this demo has a test that we can run...
                           ⍝ run demo d
                         :If ##.trace
                         :OrIf 1 _Env'TRACE_TESTS'
                             1 #.tests.demo.⎕STOP t
                         :EndIf
                         :Trap ##.halt↓0
                             msg,←#.tests.demo⍎t,' ⍬'
                             ⎕dl 2   ⍝ allow some time 
                             tested,←⊂t
                             :If 0<≢msg    ⍝ msg should be a simple NL-separated vector.
                             ⍝:AndIf 1<≡msg ⍝ if it isn't,
                                 msg←∊(⊆msg),¨NL ⍝ make it so
                             :EndIf
                         :Else
                             msg,←'error while executing test "',t,'": ',(⎕JSON⍠'Compact' 0)⎕DMX
                         :EndTrap
                     :ElseIf ##.halt
                         ⎕←'no test found for demo Demo',d   ⍝ interrupt if -halt switch was set
                     :EndIf

                     :If 0<v←_Env'SCREENSHOT'
                         file←∊1 ⎕NPARTS ##.TESTSOURCE,d,'.png'
                         :If v=2  ⍝ always save screenshot
                             #.S.SaveScreenshot file
                             :If 0<≢msg  ⍝ if there was an error, add info abt screenshot
                                 msg,←' - saved screenshot as ',file,NL
                             :EndIf
                         :ElseIf v=1
                             :If 0<≢msg
                                 #.S.SaveScreenshot file
                                 ('Type' 'I')##.Log'Saved screenshot of failed test "',file,'"'
                             :EndIf
                         :EndIf
                     :EndIf
                     :If 0=≢msg ⍝ if there were no errors testing the page! It might be worth taking/comparing screenshots to see if rendering was ok
                         :If ~⎕NEXISTS file←∊1 ⎕NPARTS ##.TESTSOURCE,'/ReferenceScreenshots'  ⍝ create folder if it does not exist
                             ⎕MKDIR file
                         :EndIf
                         file←file,'/',d,'.png'
                         :If ~⎕NEXISTS file     ⍝ no  reference screenshot yet - use current one
                             #.S.SaveScreenshot file
                             ('Type' 'I')##.Log'Saved refence screenshot "',file,'"'
                         :Else
                             file2←(¯4↓file),'-curr.png'    ⍝ save screenshot under different name
                             :If 0 Check file CompareScreenshots file2  ⍝ compare screenshots
                                 r,←⊂'Current Screenshot of demo ("',file2,'") did not  match reference screenshot ("',file,'")'
                             :EndIf
                         :EndIf
                     :EndIf

                     ⍝ list of objects that we DO NOT expect to find on the HTML page:
                     ⍝ contains either controls that don't yet exist
                     ⍝ or controls that are implemented in such a way that we don't find a 1:1 match of created controls and generated HTML elements
                     exceptions←'ApexChart' 'Bitmap' 'Font' 'Form' 'Icon' 'ImageList' 'List' 'ListView' 'Menu' 'Menubar' 'TabButton' 'Text' 'Timer'

                     ⍝ ignore children of these objects:  (like Grid, which may contain edit field)
                     ignoreChildren←⊆'Grid'
                     ignoreChildren_of←⍬

                     log←(1⊃⎕NGET(EWC_HOME,'JSWC/objectlog.json5')),']'  ⍝ get the log
                     log←0(⎕JSON⍠'Dialect' 'JSON5')log
                     log←((log.Action≡¨⊂'WC')∧(log.Caller≡¨⊂'Demo',d)∧~log{0=⍺.⎕NC'Type':0 ⋄ (⊂⎕C ⍺.Type)∊⍵}¨⎕C⊂exceptions)/log
                     ⍝ everything ⎕WC'ed by this test
                     :For lg :In ∪log
                         t←lg.ID
                         :If (⊆lg.Type)∊⍥⎕C ignoreChildren
                             ignoreChildren_of,←⎕C t
                         :EndIf
                         :If ~∨/∊ignoreChildren_of⍷¨⊆⎕C t
                             z←#.S.Find t
                             :If 326 Check ⎕DR z  ⍝ check if we can find the object t
                             ⍝⎕←⎕JSON lg
                                 ('Type' 'W')##.Log'Object "',t,'" (Type="',(lg.Type),'") that was ⎕WC''ed by Demo "',d,'" could not be found by searching for the id',NL
                                 ⍝ msg,←'Object "',t,'" (Type="',(lg.Type),'") that was ⎕WC''ed by Demo "',d,'" could not be found by searching for the id',NL
                             :EndIf
                         :EndIf
                     :EndFor
                 :EndIf
             :EndIf
         :EndIf

         :If 0<≢msg
         :AndIf ##.halt
             ⎕←'test ',d,' failed!'
             ⎕←'→',(⍕⎕LC[1]+4),'   ⍝ to continue'
             ⎕←'⎕←msg              ⍝ to see error messages'
             ⎕TRAP←0 'S' ⋄ (⎕LC[1]+1)⎕STOP 1⊃⎕XSI
         :EndIf
         lastd←d
         :If 0<≢msg
             :Trap 0
                 r,←d,':',NL,∊((⊂'   '),¨NL(≠⊆⊢)msg),¨⊂NL
             :Else
                 ⎕←(⎕JSON⍠'Compact' 0)⎕DMX
             :EndTrap
         :EndIf
     :EndIf
     ⍝ ⎕trap←0'S'
     ⍝ logs,←⊂#.S.GetLogs 'browser' 'driver'
 :EndFor
 ⍝ kill it here (already) instead of leaving that to teardown
 ⍝ to make sure that the objectlog does not get added to (yes, it happened!)
 :If ~PROCESS.HasExited
     {}PROCESS.(Kill Proc.Id)
 :EndIf
 ']'⎕NPUT(EWC_HOME,'JSWC/objectlog.json5')2
 data←1⊃⎕NGET f_olog←EWC_HOME,'JSWC/objectlog.json5'
 :If 0<≢data   ⍝ unlikely, but better be safe ;)
    ⍝ all demos & tests executed - now check the controls that were created
    ⍝ and the properties that were tested...
    ⍝ also: we should be doinh this analysis twice - once for the demos and once for the tests
    ⍝ as these results answer different questions (which both (test- and demo-authors) should be interested in...
     data←(⎕JSON⍠'Dialect' 'JSON5')data
     get←{
         ⍺{6::⍬
             ⍺⍎⍵
         }¨⊂⍵
     }
     :If 0<≢z←⍸(⊂'error'){⍺≡⍥⎕C ⍵}¨data get'Type'
         r,←'Caught ',(⍕≢z),' errors while running the tests (for details please search ',f_olog,' for "Error"): ',NL,∊((⊂'  '),¨∪data[z].Message),¨NL
         data←data[(⍳≢data)~z]
     :EndIf

     :For ctl :In (∪data get'Type')~⊂⍬
         up←(ctl∘≡¨data get'Type')/data get'Properties'   ⍝ used properties
         up←∪⊃,/up
        ⍝  {}'(overwrite:1)'⎕SE.Link.Import(⎕THIS)(EWC_HOME,'JSWC/Classes/',(⎕C ctl),'/Supported.apla')
         {}'(overwrite:1)'⎕SE.Link.Import(⎕THIS)(EWC_HOME,'JSWC/Classes/',(⎕C ctl),'/Dynamic.apla')
         {}'(overwrite:1)'⎕SE.Link.Import(⎕THIS)(EWC_HOME,'JSWC/Classes/',(⎕C ctl),'/PropList.apla')
        ⍝  sp←Supported∩PropList
         sp←Dynamic∩PropList
         :If ∨/z←~sp∊up
             ('Type' 'W')##.Log'Dynamic props of "',ctl,'" that were not used in the demos or tests: ',(¯2↓∊{'"',⍵,'", '}¨z/sp),NL
         :EndIf
     ⍝ what else can we test...???
     ⍝ - check that dynamic properties are set AND read

     :EndFor
     :If ∨/z←~(4↓¨ListOfDemos)∊4↓¨ListOfTests
         ('Type' 'W')##.Log('No tests found for these demos: ',¯2↓∊(z/ListOfDemos),¨⊂', '),NL
     :EndIf
     :If ∨/z←~(4↓¨ListOfTests)∊4↓¨ListOfDemos  ⍝ SciFi, but test anyway...
         ('Type' 'W')##.Log('Tests without demos (possibly outdated?): ',¯2↓∊(z/ListOfTests),¨⊂', '),NL
     :EndIf
 :EndIf
 :If 0=≢r
     ('Type' 'I')##.Log(⍕≢demos),' demo pages were opened and ',(⍕≢tested),' tests were excuted without issues!'
 :EndIf
