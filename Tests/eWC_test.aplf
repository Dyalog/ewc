 r←eWC_test sink;tests;demos;d;⎕TRAP;f;t;file;sup;rC;z;lastd;dl;de;from;to;arg;msg;src;_Env;DEFAULTS;v;pi;sp;Supported;PropList;up;ctl;data;get
⍝ this is admittedly an ugly hack - but I didn't want to waste time fixing it just now...
⍝ the problem is that the DTest DSL assumes tests are executed in the ns that DTest created while running the test -
⍝ but these tests are executed in #.tests.demo.
⍝ So we make the most populare variables and functions available:
 #.tests.demo.Check←Check
 #.tests.demo.Assert←Assert
 #.tests.halt←##.halt
 #.tests.trace←##.trace
 #.tests.verbose←##.verbose
 #.tests.dtb←##.dtb  ⍝ needed by check

 tests←#.tests.demo.⎕NL ¯3
 tests←{((⊂'Test')≡¨4↑¨⍵)/⍵}tests
 demos←{2⊃⎕NPARTS ⍵}¨⊃0(⎕NINFO⍠1)EWC_DPATH,'/Demo*.*'
 DEFAULTS←0(⎕JSON⍠'Dialect' 'JSON5')(1⊃⎕NGET ##.TESTSOURCE,'eWC_defaults.json5')
 '['⎕NPUT(EWC_HOME,'JSWC/objectlog.json5')1  ⍝ initialise this file so that we can append single log objects to it...
 r←''
 dl←⍬  ⍝ demo list we want to run
 de←⍬  ⍝ demos we NOT want to run
 arg←1↓##.args.Arguments   ⍝ 1st element of arg is the name of the .dylogtest
 _Env←{
    ⍝ get value of environment variable or #-based variable (case-sensitive, prefixed with 'EWC_')
    ⍝ defaults taken from DEFAULTS ns.
     z←2 ⎕NQ #'GetEnvironment'⍵
     def←{2=#.⎕NC'EWC_',⍵:#⍎'EWC_',⍵ ⋄ DEFAULTS⍎⍵}⍵
     0=≢z:def
     (⎕DR def)∊80 160:⍵
     2⊃⎕VFI ⍵
 }

 :If 0<≢arg
     :For d :In arg
         :If '~'=⊃d
             de,←⊂1↓d
         :ElseIf ∨/'..'⍷d
             (from to)←'|'(≠⊆⊢)' ',(⊃('(.*)\.\.(.*)'⎕S'\1|\2')d),' '
             f←0
             t←≢demos
             :If 0<≢from
                 f←demos⍳⊂1↓from
             :EndIf
             :If 0<≢to
                 t←demos⍳⊂¯1↓to
             :EndIf
             dl,←(f-1)↓t↑demos
         :Else
             dl,←⊂d
         :EndIf
     :EndFor
 :Else
     dl←(∊'Demo'∘≡¨4↑¨demos)/demos
 :EndIf
 dl←4↓¨dl
 demos←∪dl~de∪'Menu' 'Default'
 lastd←'just started'
 :If 1=1↑0 _Env'RANDOMORDER'
     demos[('eWC_order_',⍕≢demos)##.RandomVal 2/≢demos]
 :EndIf
 :For d :In demos
     :If (⊂'~',d)∊##.args.Arguments
         :Continue
     :EndIf
     ⍝ inspect the demo to determine coverage of properties, methods and events
     ⍝src←#.demo.⎕NR d
     ⍝wc←('''(.*)''\s*eWC\s*''(.*)'''⎕S'\1')src  ⍝ list of controls that are created (and their names)
     ⍝ws←('''(.*)''\s*eWC\s*''.*''\s*(''.*'')*'⎕S'\1')src  ⍝ props that were set (and names of related controls)
     ⍝ nah, impossible - see email to MK
     msg←''  ⍝ a global var (initialised in eWC_createBrowser)
     :If 0=⎕NC'PROCESS'
     :OrIf PROCESS{6::1 ⋄ ⍺⍎⍵}'HasExited'
         BRWSR eWC_createBrowser MODE
     :EndIf
     :If lastd≢'just started'
     :AndIf 0<pi←0 _Env'PROGRESSINDICATOR'
        ⍝ 0= no info
        ⍝ 1= show name of next test
        ⍝ 2= AND wait for keypress
         :Select ,pi
         :Case ,1
             ⎕←d
         :Case ,2
             {}⍞←'press <enter> for ',d
         :EndSelect
     :EndIf
     #.S.GoTo ROOT
     #.S.
     z←'CssSelector'#.S.Find'[id$="MENU"]'
     :If 326 Check ⎕DR z    ⍝ check if we find the menu
         msg←'could not find F1.MENU (possibly something went wrong before (lastd=',lastd,')'    ⍝ although that should be veeery unlikely now....
     :Else
         z←('CssSelector' '[id$="MENU"]')#.S.Select d      ⍝ selecting the test will load it
         :If 1 Check z  ⍝ can we select the test in the menu
             msg←'test not found in menu (attention: it is case-sensitive!)'
         :Else
             {}⎕DL 1  ⍝ allow some time to load

             z←'CssSelector'#.S.Find'[id$="MENU"]'             ⍝ check if loaded test also has a menu...
             :If 326 Check ⎕DR z
                 msg←'could not find F1.MENU'
             :Else
                 z←('CssSelector' '[id$="STOP"]')#.S.WaitFor'Stop'
                 :If ''Check z   ⍝ wait for the Stop button as an indication that the test has loaded indeed
                     ⎕←msg←'could not find STOP button'
                     ⎕←'z=',z
                     ⎕TRAP←0 'S' ⋄ (⎕LC[1]+1)⎕STOP 1⊃⎕SI
                 :Else
                     t←'Test',d   ⍝ name of related test
                     :If (⊂t)∊tests  ⍝ check if this demo has a test that we can run...
                     t←'Test',d   ⍝ name of related test
                     :If (⊂t)∊tests  ⍝ check if this demo has a test that we can run...
        ⍝ run demo d
                         :If ##.trace
                         :OrIf 1 _Env'TRACE_TESTS'
                             1 #.tests.demo.⎕STOP t
                         :EndIf
                         msg,←#.tests.demo⍎t,' ⍬'
                     :EndIf
                 :EndIf
             :EndIf
         :EndIf
     :EndIf
     :If 0<v←_Env'SCREENSHOT'
         file←∊1 ⎕NPARTS ##.TESTSOURCE,d,'.png'
         :If v=2  ⍝ always save screenshot
             #.S.SaveScreenshot file
             :If 0<≢msg  ⍝ if there was an error, add info abt screenshot
                 msg,←' - saved screenshot as ',file
             :EndIf
         :ElseIf v=1
             :If 0<≢msg
                 #.S.SaveScreenshot file
                 msg,←' - saved screenshot as ',file
                 :If ##.halt
                     ⎕←'test ',d,' failed!'
                     ⎕←'→',(⍕⎕LC[1]+2),'   ⍝ to continue'
                     ⎕TRAP←0 'S' ⋄ (⎕LC[1]+1)⎕STOP 1⊃⎕SI
                 :EndIf
             :EndIf
         :EndIf
     :EndIf
     lastd←d
     :If 0<≢msg
         r,←⊂d,': ',msg
         :EndIf
     :EndIf
 :EndFor
 ']'⎕NPUT(EWC_HOME,'JSWC/objectlog.json5')2
 data←1⊃⎕NGET EWC_HOME,'JSWC/objectlog.json5'
 :If 0<≢data   ⍝ unlikely, but better be safe ;)
    ⍝ all demos & tests executed - now check the controls that were created
    ⍝ and the properties that were tested...
    ⍝ also: it seems much better to do this analysis twice - once for the demos and once for the tests
    ⍝ as these results answer different questions (which both (test- and demo-authors) should be interested in...
     data←(⎕JSON⍠'Dialect' 'JSON5')data
     get←{
         ⍺{6::⍬
             ⍺⍎⍵
         }¨⊂⍵
     }
     :For ctl :In (∪data get'Type')~⊂⍬
         up←(ctl∘≡¨data get'Type')/data get'Properties'   ⍝ used properties
         up←∪⊃,/up
         {}'(overwrite:1)'⎕SE.Link.Import(⎕THIS)(EWC_HOME,'JSWC/Classes/',(⎕C ctl),'/Supported.apla')
         {}'(overwrite:1)'⎕SE.Link.Import(⎕THIS)(EWC_HOME,'JSWC/Classes/',(⎕C ctl),'/PropList.apla')
         sp←Supported∩PropList
         :If ∨/z←~sp∊up
             msg,←'Supported props of "',ctl,'" that were not used in the demos or tests: ',¯1↓∊{'"',⍵,'" ,'}¨z/sp
         :EndIf
     ⍝ what else can we test...???
     ⍝ - check that dynamic properties are set AND read
     ⍝ also report the demos that don't have tests for (yet)

     :EndFor
 :EndIf

 :If 0<≢r
     r←∊(⊂⎕UCS 13 10),¨r
 :Else
     ⎕←(⍕≢demos),' demo pages were opened and ',(⍕tests),' tests were excuted without issues!'
     ⎕←'👍'   ⍝ emotional & motivational message
 :EndIf
