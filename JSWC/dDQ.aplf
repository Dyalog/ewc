 {R}←∆DQ names;⎕TRAP;caller;class;type;HR;timers;event;done;interrupt;tkn;m;i

 ⎕TRAP←0 'S'
 names←,⊆names
 caller←findCaller
 names←caller removeCaller¨names

 :If ~∧/names∊'.' '#'
     ⎕SIGNAL(2.1∨.≠caller.⎕NC names,¨⊂'.Type')/11
 :EndIf

 done←interrupt←0
 :Trap 1000
     tkn←DQ_TOKENBASE+TOKENSTEP×1
     'N'Log'DQ: ',(⍕names),' at ',⍕showCallStack
     :Repeat
         :If 0=≢QUEUEIDS
         :OrIf ~∨/m←QUEUEIDS∊names
             :If 0≠≢R←2 ⎕TGET tkn
                 :If 'N'∊LOGMODES
                     'N'Log 'DQ: ',1 ⎕JSON⍠'HighRank' 'Split'⊢R
                 :EndIf
                 :If MODE=2
                     R.CodeLocation←⍕caller
                 :EndIf
                 :If 0=caller.⎕NC R.Event.ID
                     'W'Log'Ignoring event on non-existent object ',R.Event.ID
                 :Else
                     QUEUEIDS,←⊂{(¯1+⍵⍳'.')↑⍵}R.Event.ID ⋄ QUEUEDATA,←R
                 :EndIf
             :EndIf
         :EndIf

         :If (≢QUEUEIDS)≥i←⌊/QUEUEIDS⍳names
             done←processEvent QUEUEDATA[i]
             (QUEUEIDS QUEUEDATA)←(i≠⍳≢QUEUEIDS)∘/¨QUEUEIDS QUEUEDATA
         :EndIf
         done∨←0∊caller.⎕NC names
     :Until done
 :Else
     interrupt←1
 :EndTrap

 ⍝:Hold 'JSWC DQ'
 ⍝   DEQUEUEING←⍬
 ⍝:EndHold

 :If 0≠≢R
     R←(⊢/R).Event.((ID EventName),{6::⍵ ⋄ Info}⍬) ⍝ /// Need a proper queue
 :EndIf
 'INTERRUPT'⎕SIGNAL interrupt/999
