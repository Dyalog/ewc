 r←con Handler payload;ns;Event;ID;Info;events;fns;fn;event;reqfn;info;sns;i;code;conn;coni;sock;z;m;msg
 ⎕TRAP←0 'S'
 'R'Log'#',(⍕con),': ',payload
 i←(2⊃SESSIONS)⍳con
 :If i>≢1⊃SESSIONS
     'W'Log'Message received from closed session #',⍕con
     →0
 :EndIf
 code←(2+i)⊃SESSIONS

 :If (⊂10↑payload)∊'Initialise' 'Initialize'
     :If 2=⎕NC'IGNORE1Init'
     :AndIf IGNORE1Init≠0
         IGNORE1Init←0
         :Return
     :EndIf
     fn←reqfn←(10↓payload)~'()'
     fn,←(0=≢fn)/'Initialise'
     :If 3=code.⎕NC fn
         (code⍎fn)&CONNECTED
     :ElseIf 0≠≢reqfn ⍝ Explicit function requested
         'E'Log'Initialise: Function not found: ',(⍕code),'.',fn
     :EndIf
 :Else
     :Trap 999
         sns←code._JSWC ⍝ Session Namespace
         ns←0 ⎕JSON payload

         :Select ,ns.⎕NL 9
         :Case 'Event'
             ns ⎕TPUT DQ_TOKENBASE+TOKENSTEP×1
             ⍝ /// Need something better than this from JD
             :If '*'∊1↓⎕STACK[;2] ⍝ A suspension in the client app
             :AndIf 9=sns.⎕NC'TIMER'
                 sns.⎕NQ'TIMER' 1001 ⍝ Wake it up
             :EndIf
         :Case 'WG'
             ns ⎕TPUT WG_TOKENBASE+TOKENSTEP×1 ⍝ ⊃getConnection sns ns.WG.ID
         :Case 'FormatCell'
             :If 0≠≢msg←code formatCell ns
                 'T' Log ('#',⍕con),' ',msg
                 z←con WSS.Send msg
             :EndIf
         :Case 'Signal'
             :If ns.Signal.Name≡'Close' ⍝ Client about to close the socket
                 closeConnection con
             :Else
                 'E'Log'Unknown signal received: ',payload
             :EndIf
         :Else
             'E'Log'Invalid message received: ',payload
         :EndSelect
     :Else
         'E'Log'Message processing failed:'
         'E'Log←↑⎕DMX.DM
     :EndTrap
 :EndIf
